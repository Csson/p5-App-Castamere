% use App::Castamere::Util qw/format_time/;
% use List::Util qw/any/;

% my $reporter = $c->app->reporter;
% my $eval_fileinfos = $reporter->profile->eval_fileinfos;
                Profile of <%= $reporter->application %>
                for <%= format_time $reporter->profiler_active %> of (<%= format_time $reporter->profiler_duration %>)
                executing 
%   if($reporter->profile->{'option'}{'stmts'}) {
                <%= $reporter->total_stmts %> statements and
%   }
                <%= $reporter->total_sub_calls %> subroutine calls
                in <%= $reporter->profile->all_fileinfos - $eval_fileinfos %> source files
%   if($eval_fileinfos) {
                and <%= $eval_fileinfos %> string evals
%   }

%=          include 'includes/list_of_subroutines', subs => $c->app->reporter->subs(order_by => 'excl_time', limit => 30), file => undef, stats => $c->app->reporter->sub_stats

            <table class="table table-squashed table-hover table-condensed file-list">
                <thead>
                    <tr>
                        <th class="text-center" colspan="2">Statements</th>
                        <th class="text-center" colspan="2">Exclusive<br />time</th>
                        <th class="text-center">Reports</th>
                        <th class="text-center">Source file</th>
                    </tr>
                </thead>
                <tbody>

%   my @files = sort { $b->total_statement_and_eval_time <=> $a->total_statement_and_eval_time } $reporter->noneval_files->@*;

%   for my $file (@files) {

                    <tr>
                        <td class="text-right <%= include 'includes/severity_class', args => { stats => $reporter->file_stats->{'stmts'}, this => $file->total_statement_calls + $file->eval_statement_count, default_class => 'success' } %>">
                            <%= $file->total_statement_calls + $file->eval_statement_count %>
                        </td>
                        <td class="small text-right <%= include 'includes/severity_class', args => { stats => $reporter->file_stats->{'stmts'}, this => $file->total_statement_calls + $file->eval_statement_count, default_class => 'success' } %>">
                            <%= sprintf '%.1f%%', ($file->total_statement_calls + $file->eval_statement_count) / $reporter->total_stmts * 100 %>
                        </td>

                        <td class="text-right <%= include 'includes/severity_class', args => { stats => $reporter->file_stats->{'excl_time'}, this => $file->total_statement_and_eval_time, default_class => 'success' } %>">
                            <%= format_time $file->total_statement_and_eval_time %>
                        </td>
                        <td class="small text-right <%= include 'includes/severity_class', args => { stats => $reporter->file_stats->{'excl_time'}, this => $file->total_statement_and_eval_time, default_class => 'success' } %>">
                            <%= sprintf '%.1f%%', $file->total_statement_and_eval_time / $reporter->total_stmts_duration * 100 %>
                        </td>

                        %#    find any of line/block/sub in the levels.
                        <td><%= join ', ' => (grep { my $test = $_; any { $test eq $_ } values $reporter->profile->get_profile_levels->%* } qw/line block sub/) %></td>
                        <td>
                            <%= link_to $file->clean_filename, 'one_file', { filename => $file->fileinfo->filename } %>

%       if($file->fileinfo->has_evals(1)) {
                            including <%= $file->fileinfo->has_evals(1) %> string eval<%= $file->fileinfo->has_evals(1) == 1 ? '' : 's' %>

%           if($file->nested_eval_count) {
                            (<%= $file->fileinfo->has_evals(1) - $file->nested_eval_count %> direct plus <%= $file->nested_eval_count %> nested_eval_count)
%           }
%       }
                        </td>
                    </tr>
%   }
                </tbody>
            </table>


<%#

    my $allTimes = $profile->{attribute}{total_stmts_duration};
    my $allCalls = $profile->{attribute}{total_stmts_measured}
                 - $profile->{attribute}{total_stmts_discounted};
    # file in which sawampersand was noted during profiling
    my $sawampersand_fi = $profile->fileinfo_of($profile->{attribute}{sawampersand_fid}, 1);

    my (@t_stmt_exec, @t_stmt_time);
    my @fis = $profile->noneval_fileinfos;
    @fis = sort { $b->meta->{'time'} <=> $a->meta->{'time'} } @fis;

    my $dev_time = calculate_median_absolute_deviation([map { scalar $_->meta->{'time'} } @fis], 1);
    
    foreach my $fi (@fis) {
        my $meta = $fi->meta;
        my $fid = $fi->fid;
        my @extra;
        my $css_class = 'index';

        # The stats in this table include rolled up sums of nested evals.

        my ($eval_stmts, $eval_time) = (0,0);
        if (my @has_evals = $fi->has_evals(1)) {
            my $n_evals = scalar @has_evals;
            my $msg = sprintf "including %d string eval%s", $n_evals, ($n_evals>1) ? "s" : "";
            if (my @nested = grep { $_->eval_fid != $fid } @has_evals) {
                $msg .= sprintf ": %d direct plus %d nested",
                    $n_evals-@nested, scalar @nested;
            }
            push @extra, $msg;
            $eval_stmts = sum(map { $_->sum_of_stmts_count } @has_evals);
            $eval_time  = sum(map { $_->sum_of_stmts_time  } @has_evals);
        }
        # is this file one where we sawampersand (or contains an eval that is)?
        if ($sawampersand_fi
            && $] < 5.017008
            && $fi == ($sawampersand_fi->outer || $sawampersand_fi)
        ) {
            my $in_eval = ($fi == $sawampersand_fi)
                ? 'here'
                : sprintf q{<a %s>in eval here</a>}, $reporter->href_for_file($sawampersand_fi, undef, 'line');
            push @extra, sprintf qq{variables that impact regex performance for whole application seen $in_eval},
            $css_class = "warn $css_class";
        }

        print $fh qq{<tr class="$css_class">};

        my $stmts = $meta->{'calls'} + $eval_stmts;
        print $fh determine_severity($stmts,     undef, 0,
            ($allCalls) ? sprintf("%.1f%%", $stmts/$allCalls*100) : ''
        );
        push @t_stmt_exec, $stmts;

        my $time = $meta->{'time'} + $eval_time;
        print $fh determine_severity($time,      $dev_time, 1,
            ($allTimes) ? sprintf("%.1f%%", $time/$allTimes*100) : ''
        );
        push @t_stmt_time, $time;


        my %levels = reverse %{$profile->get_profile_levels};
        my $rep_links = join '&nbsp;&bull;&nbsp;', map {
            sprintf(qq{<a %s>%s</a>}, $reporter->href_for_file($fi, undef, $_), $_)
        } grep { $levels{$_} } qw(line block sub);
        print $fh "<td>$rep_links</td>";

        print $fh sprintf q{<td><a name="f%s" title="%s">%s</a> %s</td>},
            $fi->fid, $fi->abs_filename, $fi->filename_without_inc,
            (@extra) ? sprintf("(%s)", join "; ", @extra) : "";
        print $fh "</tr>\n";
    }

%>
